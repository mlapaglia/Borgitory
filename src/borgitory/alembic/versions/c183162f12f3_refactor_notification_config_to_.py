"""refactor_notification_config_to_provider_based

Revision ID: c183162f12f3
Revises: d930de046be6
Create Date: 2025-09-19 13:55:25.019433

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "c183162f12f3"
down_revision: Union[str, Sequence[str], None] = "d930de046be6"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

bind = op.get_bind()
inspector = sa.inspect(bind)
existing_tables = inspector.get_table_names()


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Check if apscheduler_jobs table exists before trying to modify it
    if "apscheduler_jobs" in inspector.get_table_names():
        with op.batch_alter_table("apscheduler_jobs", schema=None) as batch_op:
            try:
                existing_indexes = [
                    idx["name"] for idx in inspector.get_indexes("apscheduler_jobs")
                ]
                if "ix_apscheduler_jobs_next_run_time" in existing_indexes:
                    batch_op.drop_index(batch_op.f("ix_apscheduler_jobs_next_run_time"))
            except Exception as e:
                # If we can't get indexes, just try to drop the table anyway
                import logging

                logging.getLogger(__name__).warning(
                    f"Could not get indexes for apscheduler_jobs: {e}"
                )

        try:
            op.drop_table("apscheduler_jobs")
        except Exception as e:
            # Table might not exist or might have dependencies
            import logging

            logging.getLogger(__name__).warning(
                f"Could not drop apscheduler_jobs table: {e}"
            )
    with op.batch_alter_table("cleanup_configs", schema=None) as batch_op:
        batch_op.alter_column("show_list", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("show_stats", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("save_space", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=False)
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=False)

    with op.batch_alter_table("cloud_sync_configs", schema=None) as batch_op:
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=False)
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=False)

    with op.batch_alter_table("jobs", schema=None) as batch_op:
        batch_op.alter_column("total_tasks", existing_type=sa.INTEGER(), nullable=False)
        batch_op.alter_column(
            "completed_tasks", existing_type=sa.INTEGER(), nullable=False
        )

    # Truncate notification_configs table before schema changes
    # since we're changing from Pushover-specific to provider-based model
    op.execute("DELETE FROM notification_configs")

    with op.batch_alter_table("notification_configs", schema=None) as batch_op:
        batch_op.add_column(sa.Column("provider_config", sa.Text(), nullable=False))
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=False)
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=False)
        batch_op.drop_column("encrypted_app_token")
        batch_op.drop_column("encrypted_user_key")
        batch_op.drop_column("notify_on_success")
        batch_op.drop_column("notify_on_failure")

    with op.batch_alter_table("repositories", schema=None) as batch_op:
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=False)

    with op.batch_alter_table("repository_check_configs", schema=None) as batch_op:
        batch_op.alter_column("verify_data", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("repair_mode", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("save_space", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=False)
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=False)

    with op.batch_alter_table("schedules", schema=None) as batch_op:
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=False)

    with op.batch_alter_table("settings", schema=None) as batch_op:
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=False)

    with op.batch_alter_table("user_sessions", schema=None) as batch_op:
        batch_op.alter_column("remember_me", existing_type=sa.BOOLEAN(), nullable=False)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=False)
        batch_op.alter_column(
            "last_activity", existing_type=sa.DATETIME(), nullable=False
        )

    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=True)

    with op.batch_alter_table("user_sessions", schema=None) as batch_op:
        batch_op.alter_column(
            "last_activity", existing_type=sa.DATETIME(), nullable=True
        )
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("remember_me", existing_type=sa.BOOLEAN(), nullable=True)

    with op.batch_alter_table("settings", schema=None) as batch_op:
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=True)

    with op.batch_alter_table("schedules", schema=None) as batch_op:
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=True)

    with op.batch_alter_table("repository_check_configs", schema=None) as batch_op:
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=True)
        batch_op.alter_column("save_space", existing_type=sa.BOOLEAN(), nullable=True)
        batch_op.alter_column("repair_mode", existing_type=sa.BOOLEAN(), nullable=True)
        batch_op.alter_column("verify_data", existing_type=sa.BOOLEAN(), nullable=True)

    with op.batch_alter_table("repositories", schema=None) as batch_op:
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=True)

    with op.batch_alter_table("notification_configs", schema=None) as batch_op:
        batch_op.add_column(sa.Column("notify_on_failure", sa.BOOLEAN(), nullable=True))
        batch_op.add_column(sa.Column("notify_on_success", sa.BOOLEAN(), nullable=True))
        batch_op.add_column(
            sa.Column("encrypted_user_key", sa.VARCHAR(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("encrypted_app_token", sa.VARCHAR(), nullable=True)
        )
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=True)
        batch_op.drop_column("provider_config")

    with op.batch_alter_table("jobs", schema=None) as batch_op:
        batch_op.alter_column(
            "completed_tasks", existing_type=sa.INTEGER(), nullable=True
        )
        batch_op.alter_column("total_tasks", existing_type=sa.INTEGER(), nullable=True)

    with op.batch_alter_table("cloud_sync_configs", schema=None) as batch_op:
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=True)

    with op.batch_alter_table("cleanup_configs", schema=None) as batch_op:
        batch_op.alter_column("updated_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("created_at", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column("enabled", existing_type=sa.BOOLEAN(), nullable=True)
        batch_op.alter_column("save_space", existing_type=sa.BOOLEAN(), nullable=True)
        batch_op.alter_column("show_stats", existing_type=sa.BOOLEAN(), nullable=True)
        batch_op.alter_column("show_list", existing_type=sa.BOOLEAN(), nullable=True)

    op.create_table(
        "apscheduler_jobs",
        sa.Column("id", sa.VARCHAR(length=191), nullable=False),
        sa.Column("next_run_time", sa.FLOAT(), nullable=True),
        sa.Column("job_state", sa.BLOB(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("apscheduler_jobs", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_apscheduler_jobs_next_run_time"),
            ["next_run_time"],
            unique=False,
        )

    # ### end Alembic commands ###
