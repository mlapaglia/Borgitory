name: Release

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: mlapaglia/borgitory

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    
    steps:
    - name: Extract version
      id: version
      run: |
        VERSION=${{ github.event.release.tag_name }}
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Extracted version: ${VERSION}"

  publish-python:
    runs-on: ubuntu-latest
    needs: extract-version

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'

    - name: Update pyproject.toml version
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: 'version = ".*"'
        replace: 'version = "${{ needs.extract-version.outputs.version }}"'
        regex: true
        include: "pyproject.toml"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      if: github.event.release.prerelease == false
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true

    - name: Publish to TestPyPI
      if: github.event.release.prerelease == true
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        print-hash: true

  build-docker-images:
    runs-on: ${{ matrix.os }}
    needs: extract-version
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            arch: x86_64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
            arch: aarch64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Update pyproject.toml version
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: 'version = ".*"'
        replace: 'version = "${{ needs.extract-version.outputs.version }}"'
        regex: true
        include: "pyproject.toml"

    - name: Build and push Docker image by digest
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        labels: |
          org.opencontainers.image.title=Borgitory
          org.opencontainers.image.description=A comprehensive web-based management interface for BorgBackup repositories with real-time monitoring, automated scheduling, and cloud synchronization capabilities
          org.opencontainers.image.version=${{ needs.extract-version.outputs.version }}
          org.opencontainers.image.url=https://github.com/mlapaglia/borgitory
          org.opencontainers.image.source=https://github.com/mlapaglia/borgitory
          org.opencontainers.image.vendor=mlapaglia
          org.opencontainers.image.licenses=MIT
        cache-from: type=gha,scope=${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
        outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true

    - name: Export digest
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ matrix.arch }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  publish-docker:
    runs-on: ubuntu-latest
    needs: 
      - extract-version
      - build-docker-images
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For stable releases: tag with version and latest
            type=raw,value=${{ needs.extract-version.outputs.version }},enable=${{ github.event.release.prerelease == false }}
            type=raw,value=latest,enable=${{ github.event.release.prerelease == false }}
            # For prereleases: tag with exact version and alpha
            type=raw,value=${{ needs.extract-version.outputs.version }},enable=${{ github.event.release.prerelease == true }}
            type=raw,value=alpha,enable=${{ github.event.release.prerelease == true }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.extract-version.outputs.version }}

      - name: Update Docker Hub description
        if: always()
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md