name: Release

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: mlapaglia/borgitory

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    
    steps:
    - name: Extract version
      id: version
      run: |
        VERSION=${{ github.event.release.tag_name }}
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Extracted version: ${VERSION}"

  pypi-release:
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Update pyproject.toml version
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: 'version = ".*"'
        replace: 'version = "${{ needs.prepare-release.outputs.version }}"'
        regex: true
        include: "pyproject.toml"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          gcc \
          pkg-config \
          libfuse3-dev

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      if: github.event.release.prerelease == false
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: python -m twine upload dist/* --verbose

    - name: Publish to TestPyPI
      if: github.event.release.prerelease == true
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: python -m twine upload --repository testpypi dist/* --verbose

  docker-release:
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            arch: x86_64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
            arch: aarch64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Update pyproject.toml version
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: 'version = ".*"'
        replace: 'version = "${{ needs.prepare-release.outputs.version }}"'
        regex: true
        include: "pyproject.toml"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # For stable releases: tag with version and latest
          type=raw,value=${{ needs.prepare-release.outputs.version }},enable=${{ github.event.release.prerelease == false }}
          type=raw,value=latest,enable=${{ github.event.release.prerelease == false }}
          # For prereleases: tag with exact version and alpha
          type=raw,value=${{ needs.prepare-release.outputs.version }},enable=${{ github.event.release.prerelease == true }}
          type=raw,value=alpha,enable=${{ github.event.release.prerelease == true }}
        labels: |
          org.opencontainers.image.title=Borgitory
          org.opencontainers.image.description=A comprehensive web-based management interface for BorgBackup repositories with real-time monitoring, automated scheduling, and cloud synchronization capabilities
          org.opencontainers.image.version=${{ needs.prepare-release.outputs.version }}
          org.opencontainers.image.url=https://github.com/mlapaglia/borgitory
          org.opencontainers.image.source=https://github.com/mlapaglia/borgitory
          org.opencontainers.image.vendor=mlapaglia
          org.opencontainers.image.licenses=MIT

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
        build-args: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          BORGITORY_VERSION=${{ needs.prepare-release.outputs.version }}

    - name: Update Docker Hub description
      if: always() && matrix.arch == 'x86_64'
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        repository: ${{ env.IMAGE_NAME }}
        readme-filepath: ./README.md