name: Build and Test

permissions:
  contents: read

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: mlapaglia/borgitory

jobs:
  build-docker-test-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        platforms: linux/amd64,linux/arm64
        load: false
        push: false
        tags: borgitory-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  lint:
    runs-on: ubuntu-latest
    needs: build-docker-test-image
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image for current platform
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        load: true
        tags: borgitory-test
        cache-from: type=gha
    
    - name: Run linting
      run: |
        docker run --rm -v $(pwd):/workspace -w /workspace borgitory-test python lint.py check

  mypy:
    runs-on: ubuntu-latest
    needs: build-docker-test-image
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image for current platform
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        load: true
        tags: borgitory-test
        cache-from: type=gha
    
    - name: Run type checking
      run: |
        docker run --rm -v $(pwd):/workspace -w /workspace borgitory-test python lint.py mypy

  unit-tests:
    runs-on: ubuntu-latest
    needs: build-docker-test-image
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image for current platform
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        load: true
        tags: borgitory-test
        cache-from: type=gha
    
    - name: Run unit tests
      run: |
        docker run --rm \
          --cap-add SYS_ADMIN \
          --device /dev/fuse:/dev/fuse:rwm \
          -v $(pwd):/app \
          -w /app \
          borgitory-test \
          sh -c "pip install -e .[dev] && pytest tests/ --ignore=tests/integration \
            --cov=src/borgitory \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --junitxml=junit.xml \
            -o junit_family=legacy"

    - name: Upload unit test coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unit
        name: unit-tests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Upload test results to Codecov
      if: always()
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: build-docker-test-image
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image for current platform
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        load: true
        tags: borgitory-test
        cache-from: type=gha
    
    - name: Run integration tests with coverage
      run: |
        docker run --rm \
          --cap-add SYS_ADMIN \
          --device /dev/fuse:/dev/fuse:rwm \
          -v $(pwd):/app \
          -w /app \
          borgitory-test \
          pytest tests/integration/ -v --tb=short \
            --cov=src/borgitory \
            --cov-report=xml:integration-coverage.xml \
            --cov-report=html:integration-htmlcov \
            --cov-append

    - name: Upload integration test coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v5
      with:
        files: ./integration-coverage.xml
        flags: integration
        name: integration-tests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  build-python-production-package:
    runs-on: ${{ matrix.os }}
    needs: [lint, mypy, unit-tests, integration-tests]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: aarch64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Set up QEMU for ARM64 emulation
      if: matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    
    - name: Install system dependencies (x86_64)
      if: matrix.arch == 'x86_64'
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          gcc \
          pkg-config \
          libfuse3-dev
    
    - name: Build package for ARM64 using Docker
      if: matrix.arch == 'aarch64'
      run: |
        docker run --rm --platform linux/arm64 \
          -v $(pwd):/workspace \
          -w /workspace \
          python:3.13-slim \
          bash -c "
            apt-get update && \
            apt-get install -y --no-install-recommends gcc pkg-config libfuse3-dev && \
            python -m pip install --upgrade pip build twine && \
            python -m build && \
            twine check dist/*
          "
    
    - name: Set up Python (x86_64)
      if: matrix.arch == 'x86_64'
      uses: actions/setup-python@v6
      with:
        python-version: '3.13.7'
    
    - name: Install build dependencies (x86_64)
      if: matrix.arch == 'x86_64'
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    
    - name: Build package (x86_64)
      if: matrix.arch == 'x86_64'
      run: python -m build
    
    - name: Check package with twine (x86_64)
      if: matrix.arch == 'x86_64'
      run: twine check dist/*
    
    - name: Test package installation (x86_64)
      if: matrix.arch == 'x86_64'
      run: |
        # Create a virtual environment for testing
        python -m venv test_env
        
        # Install the built package
        source test_env/bin/activate
        pip install dist/*.whl
        
        # Test that the CLI works
        borgitory --version
        borgitory --help

  build-docker-production-image:
    runs-on: ubuntu-latest
    needs: [lint, mypy, unit-tests, integration-tests]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        load: false
        tags: borgitory-production
        cache-from: type=gha
        cache-to: type=gha,mode=max
