name: Build and Test

permissions:
  contents: read

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: mlapaglia/borgitory

jobs:
  prepare-test-images:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            arch: x86_64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
            arch: aarch64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        platforms: ${{ matrix.platform }}
        load: true
        push: false
        tags: borgitory-test-${{ matrix.arch }}
        cache-from: type=gha,scope=${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=${{ matrix.arch }}

    - name: Save Docker image
      run: docker save borgitory-test-${{ matrix.arch }} > /tmp/borgitory-test-${{ matrix.arch }}.tar

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-test-${{ matrix.arch }}
        path: /tmp/borgitory-test-${{ matrix.arch }}.tar
        retention-days: 1

  code-quality-lint:
    runs-on: ubuntu-latest
    needs: prepare-test-images
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Download test image
      uses: actions/download-artifact@v5
      with:
        name: docker-test-x86_64
        path: /tmp
    
    - name: Load Docker image
      run: docker load < /tmp/borgitory-test-x86_64.tar
    
    - name: Run linting
      run: |
        docker run --rm -v $(pwd):/workspace -w /workspace borgitory-test-x86_64 python lint.py check

  code-quality-types:
    runs-on: ubuntu-latest
    needs: prepare-test-images
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Download test image
      uses: actions/download-artifact@v5
      with:
        name: docker-test-x86_64
        path: /tmp
    
    - name: Load Docker image
      run: docker load < /tmp/borgitory-test-x86_64.tar
    
    - name: Run type checking
      run: |
        docker run --rm -v $(pwd):/workspace -w /workspace borgitory-test-x86_64 python lint.py mypy

  test-unit:
    runs-on: ${{ matrix.os }}
    needs: prepare-test-images
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Download test image
      uses: actions/download-artifact@v5
      with:
        name: docker-test-${{ matrix.arch }}
        path: /tmp
    
    - name: Load Docker image
      run: docker load < /tmp/borgitory-test-${{ matrix.arch }}.tar
    
    - name: Run unit tests
      run: |
        docker run --rm \
          --cap-add SYS_ADMIN \
          --device /dev/fuse:/dev/fuse:rwm \
          -v $(pwd):/app \
          -w /app \
          borgitory-test-${{ matrix.arch }} \
          sh -c "pip install -e .[dev] && pytest tests/ --ignore=tests/integration \
            --cov=src/borgitory \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --junitxml=junit.xml \
            -o junit_family=legacy"

    - name: Upload unit test coverage to Codecov
      if: always() && matrix.arch == 'x86_64'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unit
        name: unit-tests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Upload test results to Codecov
      if: always() && matrix.arch == 'x86_64'
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  test-integration:
    runs-on: ${{ matrix.os }}
    needs: prepare-test-images
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Download test image
      uses: actions/download-artifact@v5
      with:
        name: docker-test-${{ matrix.arch }}
        path: /tmp
    
    - name: Load Docker image
      run: docker load < /tmp/borgitory-test-${{ matrix.arch }}.tar
    
    - name: Run integration tests with coverage
      run: |
        docker run --rm \
          --cap-add SYS_ADMIN \
          --device /dev/fuse:/dev/fuse:rwm \
          -v $(pwd):/app \
          -w /app \
          borgitory-test-${{ matrix.arch }} \
          pytest tests/integration/ -v --tb=short \
            --cov=src/borgitory \
            --cov-report=xml:integration-coverage.xml \
            --cov-report=html:integration-htmlcov \
            --cov-append

    - name: Upload integration test coverage to Codecov
      if: always() && matrix.arch == 'x86_64'
      uses: codecov/codecov-action@v5
      with:
        files: ./integration-coverage.xml
        flags: integration
        name: integration-tests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  build-python-packages:
    runs-on: ${{ matrix.os }}
    needs: [code-quality-lint, code-quality-types, test-unit, test-integration]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
          - os: windows-latest
            arch: x86_64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Install system dependencies
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          gcc \
          pkg-config \
          libfuse3-dev
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13.7'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package with twine
      run: twine check dist/*
    
    - name: Test package installation
      run: |
        # Create a virtual environment for testing
        python -m venv test_env
        
        # Install the built package
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          test_env\Scripts\activate
        else
          source test_env/bin/activate
        fi
        pip install dist/*.whl
        
        # Test that the CLI works
        borgitory --version
        borgitory --help

  build-docker-images:
    runs-on: ${{ matrix.os }}
    needs: [code-quality-lint, code-quality-types, test-unit, test-integration]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            arch: x86_64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
            arch: aarch64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: false
        load: false
        tags: borgitory-production-${{ matrix.arch }}
        cache-from: type=gha,scope=${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
