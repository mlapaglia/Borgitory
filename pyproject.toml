[build-system]
requires = ["setuptools>=77", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "borgitory"
version = "0.1.0"
description = "A web-based management interface for BorgBackup with real-time monitoring, scheduling, and cloud sync."
readme = "README.md"
license = "MIT"
license-files = ["LICENSE"]
authors = [{ name = "Matt LaPaglia" }]
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "sqlalchemy>=2.0.35",
    "alembic>=1.16.5",
    "pydantic>=2.9.0",
    "python-multipart>=0.0.12",
    "jinja2>=3.1.4",
    "aiofiles>=24.1.0",
    "apscheduler>=3.10.4",
    "cryptography>=45.0.0",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "docker>=7.1.0",
    "passlib[bcrypt]>=1.7.4",
    "bcrypt>=4.0.0,<5.0.0",
    "python-dotenv>=1.0.1",
    "sse-starlette>=2.1.3",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: System :: Archiving :: Backup",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

[project.urls]
Homepage = "https://github.com/mlapaglia/Borgitory"
Repository = "https://github.com/mlapaglia/Borgitory"
Issues = "https://github.com/mlapaglia/Borgitory/issues"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["app", "app.*"]

[tool.setuptools.package-data]
# Include templates and static assets inside the package
"app" = [
    "templates/**/*.html",
    "templates/**/*.xml",
    "static/**/*",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+.
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini_options]
# Test discovery configuration
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# asyncio plugin configuration
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Custom markers
markers = [
    "integration: marks tests as integration tests (may require external dependencies)",
]
